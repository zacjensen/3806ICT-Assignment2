//0 - Open spot
//1 - Obstacle/wall
//2 - Starting Location
//3 - Goal
//4 - Spot already been

//Move the current position up 1 (subtract 1
MoveUp() = moveup{maze[pos[0]][pos[1]] = 4; pos[0] = pos[0] - 1;}-> Move();

//Move the current position down 1 (add 1)
MoveDown() = movedown{maze[pos[0]][pos[1]] = 4; pos[0] = pos[0] + 1;}-> Move();

//Move the current position left 1 (subtract 1)
MoveLeft() = moveleft{maze[pos[0]][pos[1]] = 4; pos[1] = pos[1] - 1;}-> Move();

//Move the current position right 1 (add 1)
MoveRight() = moveright{maze[pos[0]][pos[1]] = 4; pos[1] = pos[1] + 1;}-> Move();


//Define when goal is found
#define goalGoalFound maze[pos[0]][pos[1]] == 3;


//The task Move is the sequence of primitive tasks MoveUp, MoveDown, MoveLeft, MoveRight.
Move() = [pos[0] != 0            && maze[pos[0]-1][pos[1]] != 1 &&  maze[pos[0]-1][pos[1]] != 4] MoveUp()   []
         [pos[0] != NoOfCols - 1 && maze[pos[0]+1][pos[1]] != 1 &&  maze[pos[0]+1][pos[1]] != 4] MoveDown() []
         [pos[1] != 0            && maze[pos[0]][pos[1]-1] != 1 &&  maze[pos[0]][pos[1]-1] != 4] MoveLeft() []
         [pos[1] != NoOfRows - 1 && maze[pos[0]][pos[1]+1] != 1 &&  maze[pos[0]][pos[1]+1] != 4] MoveRight();

#assert Move() reaches goalGoalFound;